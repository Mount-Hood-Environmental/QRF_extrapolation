select(one_of(extrap_num), UniqueID) %>%
gather(Metric, value, -UniqueID) %>%
left_join(select(range_max, -Source) %>%
spread(type, value)) %>%
group_by(Metric) %>%
filter(value > max |
value < min) %>%
ungroup() %>%
pull(UniqueID) %>%
unique()
#----------------------------------------
# for linear models
#----------------------------------------
# center covariates
extrap_summ = inner_join(pred_hab_df %>%
select(UniqueID) %>%
distinct(),
rch_200_df %>%
select(UniqueID, one_of(extrap_num))) %>%
gather(metric_nm, value, -UniqueID) %>%
group_by(metric_nm) %>%
summarise(metric_mean = mean(value, na.rm=T),
metric_sd = sd(value, na.rm=T)) %>%
ungroup()
# extrapolation model data set, with normalized covariates
mod_data = inner_join(pred_hab_df,
rch_200_df %>%
select(UniqueID, one_of(extrap_num))) %>%
gather(metric_nm, value, one_of(extrap_num)) %>%
left_join(extrap_summ) %>%
mutate(norm_value = (value - metric_mean) / metric_sd) %>%
select(-(value:metric_sd)) %>%
spread(metric_nm, norm_value) %>%
left_join(rch_200_df %>%
select(UniqueID, one_of(extrap_catg)))
sum(is.na(mod_data))
# mod_data %<>%
#   bind_cols(mod_data %>%
#               is.na() %>%
#               as_tibble() %>%
#               select(one_of(extrap_covars)) %>%
#               transmute(n_NA = rowSums(.))) %>%
#   filter(n_NA == 0) %>%
#   mutate_at(vars(Watershed, one_of(extrap_catg)),
#             list(fct_drop))
# where to make extrapolation predictions
rch_pred = rch_200_df %>%
select(UniqueID, one_of(extrap_num)) %>%
pivot_longer(cols = one_of(extrap_num),
names_to = "metric_nm",
values_to = "value") %>%
left_join(extrap_summ) %>%
mutate(norm_value = (value - metric_mean) / metric_sd) %>%
select(-(value:metric_sd)) %>%
pivot_wider(names_from = "metric_nm",
values_from = "norm_value") %>%
left_join(rch_200_df %>%
select(UniqueID, !any_of(extrap_num))) %>%
select(any_of(names(rch_200_df))) %>%
mutate(in_covar_range = if_else(UniqueID %in% out_range_rchs,
F, T))
#----------------------------------------
# pull in survey design related data
#----------------------------------------
# Calculate GRTS design weights.
load(paste0(in_path,"gaa.rda"))
# pull in info about what strata each CHaMP site was assigned to (using 2014 as reference year)
site_strata = pred_hab_df %>%
select(Species, Site, Watershed) %>%
distinct() %>%
left_join(gaa %>%
select(Site,
strata = AStrat2014)) %>%
mutate(site_num = str_split(Site, '-', simplify = T)[,2]) %>%
mutate(strata = if_else(Watershed == 'Asotin',
site_num,
if_else(Watershed == 'Entiat' & grepl('ENT00001', Site),
paste('EntiatIMW', site_num, sep = '_'),
strata))) %>%
mutate(strata = if_else(grepl('EntiatIMW', strata),
str_remove(strata, '[[:digit:]]$'),
strata),
strata = if_else(grepl('EntiatIMW', strata),
str_remove(strata, '[[:digit:]]$'),
strata)) %>%
filter(!is.na(strata)) %>%
mutate(strata = paste(Watershed, strata, sep = '_')) %>%
select(-site_num)
# read in data from the CHaMP frame
champ_frame_df = read_csv(in_path,'champ_frame_data.csv') %>%
mutate(Target2014 = ifelse(is.na(AStrat2014), 'Non-Target', Target2014)) %>%
mutate(AStrat2014 = ifelse(AStrat2014 == 'Entiat IMW', paste('EntiatIMW', GeoRchIMW, sep = '_'), AStrat2014)) %>%
mutate(UseTypCHSP = ifelse(CHaMPshed == 'Lemhi' & AStrat2014 == 'Little Springs',
"Spawning and rearing", UseTypCHSP),
UseTypSTSU = ifelse(CHaMPshed == 'Lemhi' & AStrat2014 %in% c('Big Springs', 'Little Springs'),
"Spawning and rearing", UseTypSTSU)) %>%
filter(Target2014 == 'Target') %>%
rename(Watershed = CHaMPshed)
# what strata do we have?
frame_strata = champ_frame_df %>%
mutate(strata = paste(Watershed, AStrat2014, sep='_')) %>%
select(Watershed,
strata) %>%
distinct()
# how long is each strata, by species?
chnk_strata_length = champ_frame_df %>%
filter(!is.na(UseTypCHSP)) %>%
mutate(strata = paste(Watershed, AStrat2014, sep='_')) %>%
select(Watershed, matches("Strat"), FrameLeng) %>%
group_by(Watershed, strata) %>%
summarise(tot_length_km = sum(FrameLeng) / 1000) %>%
ungroup() %>%
mutate_at(vars(Watershed, strata),
list(as.factor)) %>%
arrange(Watershed, strata)
sthd_strata_length = champ_frame_df %>%
filter(!is.na(UseTypSTSU)) %>%
mutate(strata = paste(Watershed, AStrat2014, sep='_')) %>%
select(Watershed, matches("Strat"), FrameLeng) %>%
group_by(Watershed, strata) %>%
summarise(tot_length_km = sum(FrameLeng) / 1000) %>%
bind_rows(tibble(Watershed = 'Asotin',
strata = paste('Asotin', c('CC', 'NF', 'SF'), sep = '_'),
tot_length_km = 12)) %>%
ungroup() %>%
mutate_at(vars(Watershed, strata),
list(as.factor)) %>%
arrange(Watershed, strata)
strata_length = chnk_strata_length %>%
mutate(Species = 'Chinook') %>%
bind_rows(sthd_strata_length %>%
mutate(Species = 'Steelhead')) %>%
select(Species, everything())
# how many sites in each strata? and what is the length of each strata?
strata_tab = pred_hab_df %>%
select(Species, Site, Watershed, matches('per_m')) %>%
left_join(site_strata) %>%
filter(strata != 'Entiat_Entiat IMW') %>%
mutate_at(vars(Watershed),
list(fct_drop)) %>%
group_by(Species, Watershed, strata) %>%
summarise(n_sites = n_distinct(Site)) %>%
ungroup() %>%
full_join(strata_length) %>%
mutate(n_sites = if_else(is.na(n_sites),
as.integer(0),
n_sites)) %>%
# calculate the weight of each site in each strata
mutate(site_weight = if_else(n_sites > 0,
tot_length_km / n_sites,
as.numeric(NA)))
# test to see if we've accounted for all strata and most of each watershed
strata_test = frame_strata %>%
full_join(strata_tab) %>%
mutate_at(vars(Watershed),
list(fct_drop)) %>%
mutate(n_sites = if_else(is.na(n_sites),
as.integer(0),
n_sites)) %>%
select(Species, everything()) %>%
arrange(Species, Watershed, strata)
# # what frame strata don't have any sites in them?
# strata_test %>%
#   filter(n_sites == 0,
#          !is.na(tot_length_km)) %>%
#   arrange(Species, Watershed, strata) %>%
#   as.data.frame()
#
# # what strata that we have sites for are not in the frame strata?
# strata_test %>%
#   filter(n_sites > 0,
#          (is.na(tot_length_km) |
#             tot_length_km == 0)) %>%
#   as.data.frame()
# champ_frame_df %>%
#   filter(Watershed == 'Lemhi') %>%
#   select(Watershed, AStrat2014, Target2014, UseTypSTSU, FrameLeng) %>%
#   filter(!grepl('Mainstem', AStrat2014)) %>%
#   group_by(AStrat2014) %>%
#   summarise(use_length = sum(FrameLeng[!is.na(UseTypSTSU)]),
#             nonuse_length = sum(FrameLeng[is.na(UseTypSTSU)]))
# # how much of each watershed is not accounted for with current sites / strata?
# strata_test %>%
#   group_by(Species, Watershed) %>%
#   summarise_at(vars(tot_length_km),
#                list(sum),
#                na.rm = T) %>%
#   left_join(strata_test %>%
#               filter(n_sites == 0) %>%
#               group_by(Species, Watershed) %>%
#               summarise_at(vars(missing_length = tot_length_km),
#                            list(sum),
#                            na.rm = T)) %>%
#   mutate_at(vars(missing_length),
#             list(~ if_else(is.na(.), 0, .))) %>%
#   mutate(perc_missing = missing_length / tot_length_km) %>%
#   mutate_at(vars(perc_missing),
#             list(~ if_else(is.na(.), 0, .))) %>%
#   arrange(desc(perc_missing))
# calculate adjusted weights for all predicted QRF capacity sites
mod_data_weights = mod_data %>%
left_join(site_strata) %>%
left_join(strata_tab) %>%
# if site not in a strata, it gets weight proportionate to it's length
mutate(site_weight = if_else(is.na(site_weight),
Lgth_Wet / 1000,
site_weight)) %>%
group_by(Species, Watershed) %>%
mutate(sum_weights = sum(site_weight)) %>%
ungroup() %>%
mutate(adj_weight = site_weight / sum_weights)
#-------------------------------------------------------------
# clean up some memory
#-------------------------------------------------------------
rm(champ_frame_df, champ_site_rch,
chnk_strata_length, sthd_strata_length, fish_hab,
frame_strata, strata_length, strata_tab, strata_test,
gaa,
hab_avg,
hab_data,
hab_impute,
rch_200)
#-------------------------------------------------------------
# Set up the survey design.
#-------------------------------------------------------------
# getOption('survey.lonely.psu')
# this will prevent strata with only 1 site from contributing to the variance
options(survey.lonely.psu = 'certainty')
# this centers strata with only 1 site to the sample grand mean; this is conservative
# options(survey.lonely.psu = 'adjust')
# extrapolation model formula
full_form = as.formula(paste('log_qrf_cap ~ -1 + (', paste(extrap_covars, collapse = ' + '), ')'))
# fit various models
model_svy_df = mod_data_weights %>%
gather(response, qrf_cap, matches('per_m')) %>%
select(-(n_sites:sum_weights)) %>%
mutate(log_qrf_cap = log(qrf_cap)) %>%
group_by(Species, response) %>%
nest() %>%
mutate(design = map(data,
.f = function(x) {
svydesign(id = ~ 1,
data = x,
strata = ~ Watershed,
# strata = ~ strata,
weights = ~ adj_weight)
})) %>%
mutate(mod_no_champ = map(design,
.f = function(x) {
svyglm(full_form,
design = x)
}),
mod_champ = map(design,
.f = function(x) {
svyglm(update(full_form, .~ . + Watershed),
design = x)
})) %>%
arrange(Species, response) %>%
ungroup()
# make predictions at all possible reaches, using both models
model_svy_df %<>%
mutate(pred_all_rchs = list(rch_pred %>%
select(UniqueID, one_of(extrap_covars)) %>%
na.omit() %>%
left_join(rch_pred)),
# which reaches are in CHaMP watersheds?
pred_champ_rchs = map2(pred_all_rchs,
mod_champ,
.f = function(x,y) {
x %>%
left_join(mod_data_weights %>%
select(UniqueID, Watershed) %>%
left_join(rch_200_df %>%
select(UniqueID, HUC8_code)) %>%
select(HUC8_code, Watershed) %>%
distinct()) %>%
filter(!is.na(Watershed)) %>%
filter(Watershed %in% y$xlevels$Watershed) %>%
mutate_at(vars(Watershed),
list(as.factor))
})) %>%
mutate(pred_no_champ = map2(mod_no_champ,
pred_all_rchs,
.f = function(x, y) {
y %>%
select(UniqueID) %>%
bind_cols(predict(x,
newdata = y,
se = T,
type = 'response') %>%
as_tibble()) %>%
rename(log_fit = response,
log_se = SE) %>%
mutate(pred_cap = exp(log_fit) * (1 + log_se^2 / 2),
pred_se = pred_cap * log_se)
}),
pred_champ = map2(mod_champ,
pred_champ_rchs,
.f = function(x, y) {
y %>%
select(UniqueID) %>%
bind_cols(predict(x,
newdata = y,
se = T,
type = 'response') %>%
as_tibble()) %>%
rename(log_fit = response,
log_se = SE) %>%
mutate(pred_cap = exp(log_fit) * (1 + log_se^2 / 2),
pred_se = pred_cap * log_se)
}))
# quick comparison of capacity predictons with both models
comp_pred_p = model_svy_df %>%
select(Species, type = response,
pred_no_champ) %>%
unnest(cols = pred_no_champ) %>%
rename(resp_no_champ = pred_cap,
se_no_champ = pred_se) %>%
select(-log_fit, -log_se) %>%
left_join(model_svy_df %>%
select(Species, type = response,
pred_champ) %>%
unnest(cols = pred_champ) %>%
rename(resp_champ = pred_cap,
se_champ = pred_se) %>%
select(-log_fit, -log_se)) %>%
left_join(rch_200_df %>%
select(UniqueID, HUC8_code) %>%
left_join(mod_data_weights %>%
select(UniqueID, Watershed) %>%
left_join(rch_200_df %>%
select(UniqueID, HUC8_code)) %>%
select(HUC8_code, Watershed) %>%
distinct())) %>%
filter(!is.na(resp_champ)) %>%
# if mod_choice == "redds", filter out crazy values
# filter(resp_champ < 0.2,
#        resp_no_champ < 0.2) %>%
ggplot(aes(x = resp_champ,
y = resp_no_champ)) +
geom_point() +
geom_abline(linetype = 2,
color = 'red') +
facet_wrap(~ Watershed + Species + type,
scales = 'free') +
labs(x = 'CHaMP',
y = 'Non-CHaMP')
# comp_pred_p
# pull out all predictions, create data.frame with one row per reach
all_preds = model_svy_df %>%
select(Species, type = response,
pred_no_champ) %>%
unnest(cols = pred_no_champ) %>%
rename(resp_no_champ = pred_cap,
se_no_champ = pred_se) %>%
select(-log_fit, -log_se) %>%
left_join(model_svy_df %>%
select(Species, type = response,
pred_champ) %>%
unnest(cols = pred_champ) %>%
rename(resp_champ = pred_cap,
se_champ = pred_se) %>%
select(-log_fit, -log_se)) %>%
# add in direct QRF estimates
left_join(pred_hab_sites %>%
select(UniqueID, Watershed,
matches("per_m")) %>%
pivot_longer(cols = matches('per_m'),
names_to = "type",
values_to = "resp_qrf") %>%
mutate(Species = if_else(grepl('chnk', type),
'Chinook',
'Steelhead')) %>%
mutate(type = str_replace(type, 'chnk', 'cap'),
type = str_replace(type, 'sthd', 'cap')) %>%
group_by(UniqueID, Watershed, Species, type) %>%
# slice(which.max(resp_qrf)) %>%
summarise_at(vars(resp_qrf),
list(mean),
na.rm = T) %>%
ungroup()) %>%
# choose which response to use: if QRF is available, use that, then if CHaMP model is available use that, then go with non-CHaMP model
mutate(model = if_else(!is.na(resp_qrf),
"QRF",
if_else(!is.na(resp_champ),
"CHaMP",
"non-CHaMP")),
response = if_else(model == 'QRF',
resp_qrf,
if_else(model == 'CHaMP',
resp_champ,
resp_no_champ)),
SE = if_else(model == 'QRF',
0,
if_else(model == 'CHaMP',
se_champ,
se_no_champ))) %>%
select(Species, type, UniqueID, model, response, SE) %>%
# add watershed name (and HUC8 code)
left_join(rch_200_df %>%
select(UniqueID, HUC8_code, chnk, sthd) %>%
left_join(mod_data_weights %>%
select(UniqueID, Watershed) %>%
left_join(rch_200_df %>%
select(UniqueID, HUC8_code)) %>%
select(HUC8_code, Watershed) %>%
distinct())) %>%
mutate(model = if_else(!is.na(Watershed) & Watershed == 'Asotin' & model != 'QRF',
'CHaMP',
model)) %>%
pivot_longer(cols = c(response, SE),
names_to = "key",
values_to = "value") %>%
mutate(key = if_else(key == 'response',
if_else(Species == 'Chinook',
str_replace(type, 'cap', 'chnk'),
str_replace(type, 'cap', 'sthd')),
if_else(Species == 'Chinook',
paste0(str_replace(type, 'cap', 'chnk'), "_se"),
paste0(str_replace(type, 'cap', 'sthd'), "_se")))) %>%
select(UniqueID, Watershed, HUC8_code, model, chnk, sthd, key, value) %>%
pivot_wider(names_from = "key",
values_from = "value")
# fit various models
model_svy_df = mod_data_weights %>%
gather(response, qrf_cap, matches('per_m')) %>%
select(-(n_sites:sum_weights)) %>%
mutate(log_qrf_cap = log(qrf_cap)) %>%
group_by(Species, response) %>%
nest() %>%
mutate(design = map(data,
.f = function(x) {
svydesign(id = ~ 1,
data = x,
strata = ~ Watershed,
# strata = ~ strata,
weights = ~ adj_weight)
})) %>%
mutate(mod_no_champ = map(design,
.f = function(x) {
svyglm(full_form,
design = x)
}),
mod_champ = map(design,
.f = function(x) {
svyglm(update(full_form, .~ . + Watershed),
design = x)
})) %>%
arrange(Species, response) %>%
ungroup()
# calculate adjusted weights for all predicted QRF capacity sites
mod_data_weights = mod_data %>%
left_join(site_strata) %>%
left_join(strata_tab) %>%
# if site not in a strata, it gets weight proportionate to it's length
mutate(site_weight = if_else(is.na(site_weight),
Lgth_Wet / 1000,
site_weight)) %>%
group_by(Species, Watershed) %>%
mutate(sum_weights = sum(site_weight)) %>%
ungroup() %>%
mutate(adj_weight = site_weight / sum_weights)
# how many sites in each strata? and what is the length of each strata?
strata_tab = pred_hab_df %>%
select(Species, Site, Watershed, matches('per_m')) %>%
left_join(site_strata) %>%
filter(strata != 'Entiat_Entiat IMW') %>%
mutate_at(vars(Watershed),
list(fct_drop)) %>%
group_by(Species, Watershed, strata) %>%
summarise(n_sites = n_distinct(Site)) %>%
ungroup() %>%
full_join(strata_length) %>%
mutate(n_sites = if_else(is.na(n_sites),
as.integer(0),
n_sites)) %>%
# calculate the weight of each site in each strata
mutate(site_weight = if_else(n_sites > 0,
tot_length_km / n_sites,
as.numeric(NA)))
strata_length = chnk_strata_length %>%
mutate(Species = 'Chinook') %>%
bind_rows(sthd_strata_length %>%
mutate(Species = 'Steelhead')) %>%
select(Species, everything())
# how long is each strata, by species?
chnk_strata_length = champ_frame_df %>%
filter(!is.na(UseTypCHSP)) %>%
mutate(strata = paste(Watershed, AStrat2014, sep='_')) %>%
select(Watershed, matches("Strat"), FrameLeng) %>%
group_by(Watershed, strata) %>%
summarise(tot_length_km = sum(FrameLeng) / 1000) %>%
ungroup() %>%
mutate_at(vars(Watershed, strata),
list(as.factor)) %>%
arrange(Watershed, strata)
# what strata do we have?
frame_strata = champ_frame_df %>%
mutate(strata = paste(Watershed, AStrat2014, sep='_')) %>%
select(Watershed,
strata) %>%
distinct()
# read in data from the CHaMP frame
champ_frame_df = read_csv(in_path,'champ_frame_data.csv') %>%
mutate(Target2014 = ifelse(is.na(AStrat2014), 'Non-Target', Target2014)) %>%
mutate(AStrat2014 = ifelse(AStrat2014 == 'Entiat IMW', paste('EntiatIMW', GeoRchIMW, sep = '_'), AStrat2014)) %>%
mutate(UseTypCHSP = ifelse(CHaMPshed == 'Lemhi' & AStrat2014 == 'Little Springs',
"Spawning and rearing", UseTypCHSP),
UseTypSTSU = ifelse(CHaMPshed == 'Lemhi' & AStrat2014 %in% c('Big Springs', 'Little Springs'),
"Spawning and rearing", UseTypSTSU)) %>%
filter(Target2014 == 'Target') %>%
rename(Watershed = CHaMPshed)
